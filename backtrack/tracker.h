#ifndef TRACKER_H
#define TRACKER_H

#include "uthash.h"

typedef unsigned char uuid_t[16];
#define MAX_PATH_LEN 1024
#define MQ_MAX_NAME_LEN 255

#define FD_UNKNOWN 0
#define FD_FILE 0x1000

#define FD_SOCKET 0x2000
#define FD_SOCKET_STATUS_MASK 0xFFF0
#define FD_SOCKET_LISTEN 0x1
#define FD_SOCKET_ESTAB 0x2
#define FD_SOCKET_UNIX 0x10
#define FD_SOCKET_SERVER 0x100 //socket that have been bind(), usually means it's a server.

#define FD_PIPE 0x4000
#define FD_MEMORY 0x8000 // although this is not a file descriptor (fd), we store memory regions here for simplicity and convenience.

typedef struct {
    int fd_num;
    // uuid_t uuid;  // no need to save, uuid generated by hash func
    int type;
    int is_cloexec;

    char name[MAX_PATH_LEN];// file name | socket peer
    char bindname[MAX_PATH_LEN];// used by socket 
    size_t read_count;
    size_t write_count;
    size_t read_bytes;
    size_t write_bytes;
    UT_hash_handle hh;
} fd_node;

typedef struct {
    pid_t pid;
    uuid_t uuid;
    fd_node *fd_table;
    char pwd[MAX_PATH_LEN];
    UT_hash_handle hh;
} process_node;

typedef struct {
    int shmid;
    uuid_t uuid;
    UT_hash_handle hh;
} shm_node;

typedef struct {
    int msqid;
    uuid_t uuid;
    UT_hash_handle hh;
} msq_node;

typedef struct {
    int mqdes;
    // uuid_t uuid;
    char name[MQ_MAX_NAME_LEN];
    UT_hash_handle hh;
} mq_node;

void delete_fd(process_node *proc, int fd_num);
void delete_process(pid_t pid);

void init_tracker();
void update_tracker(long timestamp, void *data);
void print_all_processes();
void cleanup_tracker();

#endif //TRACKER_H
